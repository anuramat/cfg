local all_events = {
  'BufAdd',
  'BufDelete',
  'BufEnter',
  'BufFilePost',
  'BufFilePre',
  'BufHidden',
  'BufLeave',
  'BufModifiedSet',
  'BufNew',
  'BufNewFile',
  'BufRead',
  'BufReadPost',
  'BufReadCmd',
  'BufReadPre',
  'BufUnload',
  'BufWinEnter',
  'BufWinLeave',
  'BufWipeout',
  'BufWrite',
  'BufWritePre',
  'BufWriteCmd',
  'BufWritePost',
  'ChanInfo',
  'ChanOpen',
  'CmdUndefined',
  'CmdlineChanged',
  'CmdlineEnter',
  'CmdlineLeave',
  'CmdwinEnter',
  'CmdwinLeave',
  'ColorScheme',
  'ColorSchemePre',
  'CompleteChanged',
  'CompleteDone',
  'CompleteDonePre',
  'CursorHold',
  'CursorHoldI',
  'CursorMoved',
  'CursorMovedI',
  'DiffUpdated',
  'DirChanged',
  'DirChangedPre',
  'ExitPre',
  'FileAppendCmd',
  'FileAppendPost',
  'FileAppendPre',
  'FileChangedRO',
  'FileChangedShell',
  'FileChangedShellPost',
  'FileReadCmd',
  'FileReadPost',
  'FileReadPre',
  'FileType',
  'FileWriteCmd',
  'FileWritePost',
  'FileWritePre',
  'FilterReadPost',
  'FilterReadPre',
  'FilterWritePost',
  'FilterWritePre',
  'FocusGained',
  'FocusLost',
  'FuncUndefined',
  'InsertChange',
  'InsertCharPre',
  'InsertEnter',
  'InsertLeave',
  'InsertLeavePre',
  'MenuPopup',
  'ModeChanged',
  -- 'OptionSet',
  'QuickFixCmdPost',
  'QuickFixCmdPre',
  'QuitPre',
  'RecordingEnter',
  'RecordingLeave',
  'RemoteReply',
  -- 'SafeState',
  'SearchWrapped',
  'SessionLoadPost',
  'SessionWritePost',
  'ShellCmdPost',
  'ShellFilterPost',
  'Signal',
  'SourceCmd',
  'SourcePost',
  'SourcePre',
  'SpellFileMissing',
  'StdinReadPost',
  'StdinReadPre',
  'SwapExists',
  'Syntax',
  'TabClosed',
  'TabEnter',
  'TabLeave',
  'TabNew',
  'TabNewEntered',
  'TermClose',
  'TermEnter',
  'TermLeave',
  'TermOpen',
  'TermRequest',
  'TermResponse',
  'TextChanged',
  'TextChangedI',
  'TextChangedP',
  'TextChangedT',
  'TextYankPost',
  'UIEnter',
  'UILeave',
  'User',
  'VimEnter',
  'VimLeave',
  'VimLeavePre',
  'VimResized',
  'VimResume',
  'VimSuspend',
  'WinClosed',
  'WinEnter',
  'WinLeave',
  'WinNew',
  'WinResized',
  'WinScrolled',
}

--- Prints triggered events for debug purposes
--- Usage:
--- ```lua
--- M.debug_events({ 'BufReadPre', 'BufNewFile' })
--- ```
--- @param events? table List of events to subscribe to
local function follow_events(events)
  local g = vim.api.nvim_create_augroup('event_debugger', { clear = true })
  local counter = 0
  if events == nil then
    events = all_events
  end
  for _, e in pairs(events) do
    vim.api.nvim_create_autocmd(e, {
      group = g,
      callback = function(opts)
        vim.notify('Event ' .. tostring(counter) .. ' triggered: ' .. opts.event)
        counter = counter + 1
      end,
    })
  end
end

follow_events({})
